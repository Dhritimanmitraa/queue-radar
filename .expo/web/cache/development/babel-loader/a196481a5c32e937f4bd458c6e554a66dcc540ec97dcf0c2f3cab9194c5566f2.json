{"ast":null,"code":"function buildAddress(tags) {\n  if (!tags) return undefined;\n  const parts = [tags['addr:housenumber'], tags['addr:street'], tags['addr:city'], tags['addr:postcode']].filter(Boolean);\n  return parts.length ? parts.join(', ') : tags['addr:full'] || tags['addr:place'];\n}\nexport async function fetchNearbySalonsOSM(latitude, longitude, radiusMeters = 3000) {\n  const query = `[\n    out:json\n  ];(\n    node[\"shop\"=\"hairdresser\"](around:${radiusMeters},${latitude},${longitude});\n    node[\"amenity\"=\"barber\"](around:${radiusMeters},${latitude},${longitude});\n    node[\"shop\"=\"beauty\"](around:${radiusMeters},${latitude},${longitude});\n  );out body ${Math.min(200, Math.floor(radiusMeters / 20))};`;\n  const url = 'https://overpass-api.de/api/interpreter';\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'text/plain;charset=UTF-8'\n    },\n    body: query\n  });\n  if (!response.ok) {\n    throw new Error(`OSM Overpass request failed: ${response.status}`);\n  }\n  const data = await response.json();\n  const elements = data.elements || [];\n  return elements.map(e => ({\n    place_id: String(e.id),\n    name: e.tags?.name || 'Salon',\n    geometry: {\n      location: {\n        lat: e.lat,\n        lng: e.lon\n      }\n    },\n    vicinity: buildAddress(e.tags)\n  }));\n}","map":{"version":3,"names":["buildAddress","tags","undefined","parts","filter","Boolean","length","join","fetchNearbySalonsOSM","latitude","longitude","radiusMeters","query","Math","min","floor","url","response","fetch","method","headers","body","ok","Error","status","data","json","elements","map","e","place_id","String","id","name","geometry","location","lat","lng","lon","vicinity"],"sources":["C:/Users/dhrit/Desktop/Idea/services/osm.ts"],"sourcesContent":["export type OSMPlace = {\r\n  id: number;\r\n  lat: number;\r\n  lon: number;\r\n  tags?: Record<string, string>;\r\n};\r\n\r\nfunction buildAddress(tags: Record<string, string> | undefined): string | undefined {\r\n  if (!tags) return undefined;\r\n  const parts = [\r\n    tags['addr:housenumber'],\r\n    tags['addr:street'],\r\n    tags['addr:city'],\r\n    tags['addr:postcode'],\r\n  ].filter(Boolean);\r\n  return parts.length ? parts.join(', ') : tags['addr:full'] || tags['addr:place'];\r\n}\r\n\r\nexport async function fetchNearbySalonsOSM(\r\n  latitude: number,\r\n  longitude: number,\r\n  radiusMeters: number = 3000\r\n) {\r\n  // hairdressers / barbers often tagged as shop=hairdresser, amenity=barber, shop=beauty\r\n  const query = `[\r\n    out:json\r\n  ];(\r\n    node[\"shop\"=\"hairdresser\"](around:${radiusMeters},${latitude},${longitude});\r\n    node[\"amenity\"=\"barber\"](around:${radiusMeters},${latitude},${longitude});\r\n    node[\"shop\"=\"beauty\"](around:${radiusMeters},${latitude},${longitude});\r\n  );out body ${Math.min(200, Math.floor(radiusMeters / 20))};`;\r\n\r\n  const url = 'https://overpass-api.de/api/interpreter';\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'text/plain;charset=UTF-8' },\r\n    body: query,\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`OSM Overpass request failed: ${response.status}`);\r\n  }\r\n  const data = await response.json();\r\n  const elements: OSMPlace[] = data.elements || [];\r\n\r\n  return elements.map((e) => ({\r\n    place_id: String(e.id),\r\n    name: e.tags?.name || 'Salon',\r\n    geometry: { location: { lat: e.lat, lng: e.lon } },\r\n    vicinity: buildAddress(e.tags),\r\n  }));\r\n}\r\n\r\n\r\n"],"mappings":"AAOA,SAASA,YAAYA,CAACC,IAAwC,EAAsB;EAClF,IAAI,CAACA,IAAI,EAAE,OAAOC,SAAS;EAC3B,MAAMC,KAAK,GAAG,CACZF,IAAI,CAAC,kBAAkB,CAAC,EACxBA,IAAI,CAAC,aAAa,CAAC,EACnBA,IAAI,CAAC,WAAW,CAAC,EACjBA,IAAI,CAAC,eAAe,CAAC,CACtB,CAACG,MAAM,CAACC,OAAO,CAAC;EACjB,OAAOF,KAAK,CAACG,MAAM,GAAGH,KAAK,CAACI,IAAI,CAAC,IAAI,CAAC,GAAGN,IAAI,CAAC,WAAW,CAAC,IAAIA,IAAI,CAAC,YAAY,CAAC;AAClF;AAEA,OAAO,eAAeO,oBAAoBA,CACxCC,QAAgB,EAChBC,SAAiB,EACjBC,YAAoB,GAAG,IAAI,EAC3B;EAEA,MAAMC,KAAK,GAAG;AAChB;AACA;AACA,wCAAwCD,YAAY,IAAIF,QAAQ,IAAIC,SAAS;AAC7E,sCAAsCC,YAAY,IAAIF,QAAQ,IAAIC,SAAS;AAC3E,mCAAmCC,YAAY,IAAIF,QAAQ,IAAIC,SAAS;AACxE,eAAeG,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,KAAK,CAACJ,YAAY,GAAG,EAAE,CAAC,CAAC,GAAG;EAE5D,MAAMK,GAAG,GAAG,yCAAyC;EACrD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAChCG,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAA2B,CAAC;IACvDC,IAAI,EAAET;EACR,CAAC,CAAC;EACF,IAAI,CAACK,QAAQ,CAACK,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgCN,QAAQ,CAACO,MAAM,EAAE,CAAC;EACpE;EACA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAClC,MAAMC,QAAoB,GAAGF,IAAI,CAACE,QAAQ,IAAI,EAAE;EAEhD,OAAOA,QAAQ,CAACC,GAAG,CAAEC,CAAC,KAAM;IAC1BC,QAAQ,EAAEC,MAAM,CAACF,CAAC,CAACG,EAAE,CAAC;IACtBC,IAAI,EAAEJ,CAAC,CAAC5B,IAAI,EAAEgC,IAAI,IAAI,OAAO;IAC7BC,QAAQ,EAAE;MAAEC,QAAQ,EAAE;QAAEC,GAAG,EAAEP,CAAC,CAACO,GAAG;QAAEC,GAAG,EAAER,CAAC,CAACS;MAAI;IAAE,CAAC;IAClDC,QAAQ,EAAEvC,YAAY,CAAC6B,CAAC,CAAC5B,IAAI;EAC/B,CAAC,CAAC,CAAC;AACL","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}