{"ast":null,"code":"export async function fetchNearbySalons(latitude, longitude, radiusMeters = 3000) {\n  const apiKey = process.env.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY;\n  if (!apiKey) {\n    throw new Error('Missing EXPO_PUBLIC_GOOGLE_MAPS_API_KEY. Set it in your environment.');\n  }\n  const params = new URLSearchParams({\n    location: `${latitude},${longitude}`,\n    radius: String(radiusMeters),\n    type: 'hair_care',\n    keyword: 'barber|salon',\n    key: apiKey\n  });\n  const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?${params.toString()}`;\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`Places request failed: ${response.status}`);\n  }\n  const data = await response.json();\n  if (data.status && data.status !== 'OK' && data.status !== 'ZERO_RESULTS') {\n    throw new Error(`Places API error: ${data.status}`);\n  }\n  const results = (data.results || []).map(r => ({\n    place_id: r.place_id,\n    name: r.name,\n    geometry: r.geometry,\n    rating: r.rating,\n    user_ratings_total: r.user_ratings_total,\n    opening_hours: r.opening_hours,\n    vicinity: r.vicinity\n  }));\n  return results;\n}","map":{"version":3,"names":["fetchNearbySalons","latitude","longitude","radiusMeters","apiKey","process","env","EXPO_PUBLIC_GOOGLE_MAPS_API_KEY","Error","params","URLSearchParams","location","radius","String","type","keyword","key","url","toString","response","fetch","ok","status","data","json","results","map","r","place_id","name","geometry","rating","user_ratings_total","opening_hours","vicinity"],"sources":["C:/Users/dhrit/Desktop/Idea/services/places.ts"],"sourcesContent":["export type NearbySalonPlace = {\r\n  place_id: string;\r\n  name: string;\r\n  geometry: { location: { lat: number; lng: number } };\r\n  rating?: number;\r\n  user_ratings_total?: number;\r\n  opening_hours?: { open_now?: boolean };\r\n  vicinity?: string;\r\n};\r\n\r\n/**\r\n * Fetch nearby salons/barbers using Google Places Nearby Search API\r\n */\r\nexport async function fetchNearbySalons(\r\n  latitude: number,\r\n  longitude: number,\r\n  radiusMeters: number = 3000\r\n): Promise<NearbySalonPlace[]> {\r\n  const apiKey = process.env.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY;\r\n  if (!apiKey) {\r\n    throw new Error(\r\n      'Missing EXPO_PUBLIC_GOOGLE_MAPS_API_KEY. Set it in your environment.'\r\n    );\r\n  }\r\n\r\n  const params = new URLSearchParams({\r\n    location: `${latitude},${longitude}`,\r\n    radius: String(radiusMeters),\r\n    // Prefer hair_care / beauty_salon types and barber/salon keyword\r\n    type: 'hair_care',\r\n    keyword: 'barber|salon',\r\n    key: apiKey,\r\n  });\r\n\r\n  const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?${params.toString()}`;\r\n  const response = await fetch(url);\r\n  if (!response.ok) {\r\n    throw new Error(`Places request failed: ${response.status}`);\r\n  }\r\n  const data = await response.json();\r\n  if (data.status && data.status !== 'OK' && data.status !== 'ZERO_RESULTS') {\r\n    // Return empty list on ZERO_RESULTS; throw on other errors\r\n    throw new Error(`Places API error: ${data.status}`);\r\n  }\r\n\r\n  const results: NearbySalonPlace[] = (data.results || []).map((r: any) => ({\r\n    place_id: r.place_id,\r\n    name: r.name,\r\n    geometry: r.geometry,\r\n    rating: r.rating,\r\n    user_ratings_total: r.user_ratings_total,\r\n    opening_hours: r.opening_hours,\r\n    vicinity: r.vicinity,\r\n  }));\r\n\r\n  return results;\r\n}\r\n\r\n\r\n"],"mappings":"AAaA,OAAO,eAAeA,iBAAiBA,CACrCC,QAAgB,EAChBC,SAAiB,EACjBC,YAAoB,GAAG,IAAI,EACE;EAC7B,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,+BAA+B;EAC1D,IAAI,CAACH,MAAM,EAAE;IACX,MAAM,IAAII,KAAK,CACb,sEACF,CAAC;EACH;EAEA,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;IACjCC,QAAQ,EAAE,GAAGV,QAAQ,IAAIC,SAAS,EAAE;IACpCU,MAAM,EAAEC,MAAM,CAACV,YAAY,CAAC;IAE5BW,IAAI,EAAE,WAAW;IACjBC,OAAO,EAAE,cAAc;IACvBC,GAAG,EAAEZ;EACP,CAAC,CAAC;EAEF,MAAMa,GAAG,GAAG,gEAAgER,MAAM,CAACS,QAAQ,CAAC,CAAC,EAAE;EAC/F,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;EACjC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIb,KAAK,CAAC,0BAA0BW,QAAQ,CAACG,MAAM,EAAE,CAAC;EAC9D;EACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAClC,IAAID,IAAI,CAACD,MAAM,IAAIC,IAAI,CAACD,MAAM,KAAK,IAAI,IAAIC,IAAI,CAACD,MAAM,KAAK,cAAc,EAAE;IAEzE,MAAM,IAAId,KAAK,CAAC,qBAAqBe,IAAI,CAACD,MAAM,EAAE,CAAC;EACrD;EAEA,MAAMG,OAA2B,GAAG,CAACF,IAAI,CAACE,OAAO,IAAI,EAAE,EAAEC,GAAG,CAAEC,CAAM,KAAM;IACxEC,QAAQ,EAAED,CAAC,CAACC,QAAQ;IACpBC,IAAI,EAAEF,CAAC,CAACE,IAAI;IACZC,QAAQ,EAAEH,CAAC,CAACG,QAAQ;IACpBC,MAAM,EAAEJ,CAAC,CAACI,MAAM;IAChBC,kBAAkB,EAAEL,CAAC,CAACK,kBAAkB;IACxCC,aAAa,EAAEN,CAAC,CAACM,aAAa;IAC9BC,QAAQ,EAAEP,CAAC,CAACO;EACd,CAAC,CAAC,CAAC;EAEH,OAAOT,OAAO;AAChB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}